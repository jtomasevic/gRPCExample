syntax = "proto3";
package tasks;
option go_package = "services/tasks/service";
import "google/api/annotations.proto";


// Taks we have to do
message Task {
    // Unique integer identifier of the  task
    string id = 1;

    // Title of the task
    string title = 2;

    // Detail description of the task
    string description = 3;

    string userId = 5;
}

// Request data to create new task
message CreateRequest{
    // Task entity to add
    Task task = 1;
}

// Contains data of created task
message CreateResponse{
    // ID of created task
    string id = 1;
}

// Request data to read task
message ReadRequest{
    // Unique integer identifier of the task
    string id = 1;
}

// Contains task data specified in by ID request
message ReadResponse{
    // Task entity read by ID
    Task task = 1;
}

// Request data to update task
message UpdateRequest{
    // Task entity to update
    Task task = 1;
}

// Contains status of update operation
message UpdateResponse{
    // Contains number of entities have beed updated
    // Equals 1 in case of succesfull update
    int64 updated = 1;
}

// Request data to delete task
message DeleteRequest{
    // Unique integer identifier of the task to delete
    string id = 1;
}

// Contains status of delete operation
message DeleteResponse{
    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 1;
}

// Request data to read all task
message ReadAllRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;
}

// Contains list of all tasks
message ReadAllResponse{
    // List of all tasks
    repeated Task task = 1;
}

// Service to manage list of tasks
service TaskService {
    // Create new task
    rpc Create(CreateRequest) returns (CreateResponse){
        option (google.api.http) = {
            post: "/task"
            body: "*"
        };
    }

    // Read task
    rpc GetById(ReadRequest) returns (ReadResponse){
        option (google.api.http) = {
            get: "/task/{id}"
        };
    }

    // Update task
    rpc Update(UpdateRequest) returns (UpdateResponse){
        option (google.api.http) = {
            put: "/task/{task.id}"
            body: "*"

            additional_bindings {
                patch: "/task/{task.id}"
                body: "*"
            }
        };
    }

    // Delete task
    rpc Delete(DeleteRequest) returns (DeleteResponse){
        option (google.api.http) = {
            delete: "/task/{id}"
        };
    }

    // Read all tasks
    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse) {
        option (google.api.http) = {
            get: "/tasks"
        };
    }
}
